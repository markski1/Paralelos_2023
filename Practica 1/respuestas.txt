[ESTAS RESPUESTAS APLICAN A LA PC DONDE LO HICE, EN OTRAS PC PUEDEN VARIAR]

1. La version iterativa es mucho mas rapida que la recursiva. La recursiva parece necesitar ejecutarse a si misma varias veces por cada incremento de N, mientras que la iterativa hace mejor aprovechamiento de lo que ya se calculo.

2. La primera version es mucho mas rapida que la segunda. Parece que la primera version calcula una funcion compleja una vez y luego reutiliza el resultado, mientras que la segunda calcula la funcion compleja varias veces.

3. La división parece ser mas intensiva que el resto. 

4. Todas las operaciones parecen tardar mas o menos lo mismo. En una notebook vieja la división fue mas lenta. Cambiar los numeros por potencias de 2 parece no tener efecto.

5. La división parece ser ligeramente mas rápida.

6. 	Quadratic1: La solución Double parece tener mayor precisión, mientras que la solución Float redondea a 2.0000;
	Quadratic2: La solución Float parece ser algo mas lenta que la solución Double.
	Quadratic3: La solución Float es bastante mas rapida que la solución Double.

	Diferencias entre q2 y q3: q3 parece usar constantes y funciones especiales para Float, lo que probablemente
	le da el mejor rendimiento.

7. La version que utiliza 'for' para iterar parece ser ligeramente mas rapida, pero no lo suficiente para importar en el mundo real.

8. El uso de setters y getters no tiene sentido en este caso. Las llamadas a funcion agregan overhead innecesario. En la versión sin optimizaciones esto tiene un gran impacto, pero al usar optimizaciones esto parece ser solucionado.
   Se saca mejor provecho de la localidad de memorias recorriendo B por columnas.
   No parecen haber quedado expresiones que se puedan refactorizar luego de haber hecho lo anterior.
   Usar la variable local para luego sumarla parece hacer el rendimiento mucho peor. No estoy seguro de porque.
   

9. El algoritmo mmblk parece ser bastante mas rapido. En el sistema donde lo probe, el tamaño de bloque optimo parece ser 16. Imagino que es dependiente de su cache.

10. 
